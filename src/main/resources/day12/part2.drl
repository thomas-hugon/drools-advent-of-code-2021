import common.*;
import day12.*;
import java.util.List;
import java.lang.Integer;
import org.apache.commons.lang3.StringUtils
import java.util.Comparator
import java.util.stream.Collectors;

rule "insert_caves_network"
when
    InputLine( $vPos: lineNumber, $val: value )
then
    String[] caves = $val.split("-");
    Cave a = new Cave(caves[0]);
    Cave b = new Cave(caves[1]);
    if(!a.isEndCave()){
        insert(new Link(a, b));
    }
    if(!b.isEndCave()){
        insert(new Link(b, a));
    }
end

rule "insert_initial_path"
when
    not Path()
then
    insert(new Path(List.of(new Cave("start"))));
end

rule "update_path_with_small_caves"
when
    $path: Path($current: current)
    $l: Link(fromCave == $current, toCave.small == true, $to: toCave )
    eval( !$path.isDuplicateSmallCave() || !$path.getPath().contains($to) )
then
    insert($path.appending($to));
end

rule "update_path_with_big_caves"
when
    $path: Path($current: current)
    $l: Link(fromCave == $current, toCave.big == true, $to: toCave )
then
    insert($path.appending($to));
end

rule "update_path_with_end_caves"
when
    $path: Path($current: current)
    $l: Link(fromCave == $current, toCave.endCave == true, $to: toCave )
then
    insert($path.appending($to));
end

rule "count_ended_paths"
when
    $lisr: List() from collect( Path(current.endCave == true) )
then
    System.err.println("part2="+$lisr.size());
end




