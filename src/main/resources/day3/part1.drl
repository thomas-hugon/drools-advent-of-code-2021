import common.*;
import day3.*;
import java.util.List;

rule "create_aggregate"
when
    not BitsAggregate()
then
    insert(new BitsAggregate());
end

rule "parse_line"
when
    $input1: InputLine( $val: value )
then
    insert(new IndexedBits($val));
end

rule "aggregate_bits_until_all_indexes_reach_length"
when
    $agg: BitsAggregate()
    $counter: IndexedBits( currentIndex < len, $index: currentIndex, $bits: bits )
then
    $agg.add($index, $bits[$index]);
    $counter.inc();
    update($counter);
end

rule "compute_power_consumption"
when
    $agg: BitsAggregate()
    List( $size: size ) from collect( IndexedBits() )
    List( size == $size ) from collect( IndexedBits(currentIndex == len) )
then
    int gamma = Integer.parseInt(new String(java.util.stream.IntStream.of($agg.sum()).map(i -> ((i * 2) / $size) + '0').toArray(), 0, 12), 2);
    int epsilon = 0xFFF ^ gamma;
    System.err.println("part1="+(epsilon*gamma));
end

